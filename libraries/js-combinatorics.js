/**
 * Minified by jsDelivr using Terser v5.14.1.
 * Original file: /npm/js-combinatorics@2.1.1/combinatorics.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
export const version="2.1.1";export function permutation(t,e){if(t<0)throw new RangeError(`${t} is out of range`);if(e<0)throw new RangeError(`${e} is out of range`);if(0==e)return 1n;if(t<e)return 0n;let[n,r,i]=[BigInt(t),BigInt(e),1n];for(;r--;)i*=n--;return i}export function combination(t,e){return 0==e||t==e?1n:t<e?0n:permutation(t,e)/permutation(e,e)}export function factorial(t){return permutation(t,t)}export function factoradic(t,e=0){if(t<0)throw new RangeError(`${t} is out of range`);let[n,r]=[BigInt(t),1n];if(e)r=BigInt(factorial(e));else{for(e=1;r<n;r*=BigInt(++e));n<r&&(r/=BigInt(e--))}let i=[0];for(;e;r/=BigInt(e--))i[e]=Number(n/r),n%=r;return i}export function combinadic(t,e){const n=combination(t,e),[r,i]=[BigInt(t),BigInt(e)];return t=>{if(t<0||n<=t)throw new RangeError(`${t} is out of range`);let s=[],[o,h]=[r,i],a=BigInt(n)-1n-BigInt(t);for(let t=0;t<e;t++){for(o--;a<combination(o,h);)o--;s.push(Number(r-1n-o)),a-=combination(o,h),h--}return s}}const _crypto="undefined"!=typeof crypto?crypto:{},_randomBytes="function"==typeof _crypto.randomBytes?t=>Uint8Array.from(_crypto.randomBytes(t)):"function"==typeof _crypto.getRandomValues?t=>_crypto.getRandomValues(new Uint8Array(t)):t=>Uint8Array.from(Array(t),(()=>256*Math.random()));export function randomInteger(t=0,e=Math.pow(2,53)){let n=t.constructor;if(0===arguments.length)return Math.floor(Math.random()*n(e));if(1==arguments.length&&([t,e]=[n(0),t]),"number"==typeof t)return[t,e]=[Math.ceil(Number(t)),Math.ceil(Number(e))],Math.floor(Math.random()*(e-t))+t;const r=n(e)-n(t),i=r.toString(16).length,s=_randomBytes(i),o=s.reduce(((t,e)=>(t<<n(8))+n(e)),n(0));return(n(o)*r>>n(8*i))+n(t)}class _CBase{static of(...t){return new(Function.prototype.bind.apply(this,[null].concat(t)))}static from(t){return new(Function.prototype.bind.apply(this,[null].concat(t)))}[Symbol.iterator](){return function*(t,e){for(let n=0n;n<e;n++)yield t.at(n)}(this,this.length)}toArray(){return[...this]}get isBig(){return Number.MAX_SAFE_INTEGER<this.length}get isSafe(){return"undefined"!=typeof BigInt||!this.isBig}_check(t){if(t<0){if(this.length<-t)throw new RangeError(`${t} is out of range`);return BigInt(this.length)+BigInt(t)}if(this.length<=t)throw new RangeError(`${t} is out of range`);return t}at(t){}nth(t){return this.at(t)}sample(){return this.at(randomInteger(this.length))}samples(){return function*(t){for(;;)yield t.sample()}(this)}}export class Permutation extends _CBase{constructor(t,e=0){super(),this.seed=[...t],this.size=0<e?e:this.seed.length,this.length=permutation(this.seed.length,this.size),Object.freeze(this)}at(t){if(void 0===(t=this._check(t)))return;const e=this.seed.length-this.size,n=factorial(e);let r=factoradic(BigInt(t)*BigInt(n),this.seed.length),i=this.seed.slice(),s=[];for(let t=this.seed.length-1;e<=t;t--)s.push(i.splice(r[t],1)[0]);return s}}export class Combination extends _CBase{constructor(t,e=0){super(),this.seed=[...t],this.size=0<e?e:this.seed.length,this.size=e,this.length=combination(this.seed.length,this.size),this.comb=combinadic(this.seed.length,this.size),Object.freeze(this)}bitwiseIterator(){const t=t=>{if(t<=0n)return 0n;const e=t&-t,n=e+t;return n+((n^t)/e>>2n)};let e=(1n<<BigInt(this.size))-1n;return function*(n,r){for(let i=0n;i<BigInt(r);i++,e=t(e)){let t=[];for(let r=e,i=0;0n<r;r>>=1n,i++)1n&r&&t.push(n.seed[i]);yield t}}(this,this.length)}at(t){if(void 0===(t=this._check(t)))return;let e=[];for(let n of this.comb(t))e.push(this.seed[n]);return e}}export class BaseN extends _CBase{constructor(t,e=1){if(e<1)throw new RangeError(`${e} is out of range`);super(),this.seed=[...t],this.size=e;let n=this.seed.length;this.base=n,this.length=BigInt(n)**BigInt(e),Object.freeze(this)}at(t){if(void 0===(t=this._check(t)))return;let e=BigInt(t);const n=BigInt(this.base);let r=[];for(let t=0;t<this.size;t++){let t=e%n;r.push(this.seed[Number(t)]),e-=t,e/=n}return r}}export class PowerSet extends _CBase{constructor(t){super(),this.seed=[...t];const e=1n<<BigInt(this.seed.length);this.length=e,Object.freeze(this)}at(t){if(void 0===(t=this._check(t)))return;let e=BigInt(t),n=[];for(let t=0n;e;e>>=1n,t++)1n&e&&n.push(this.seed[Number(t)]);return n}}export class CartesianProduct extends _CBase{constructor(...t){super(),this.seed=t.map((t=>[...t])),this.size=this.seed.length;const e=this.seed.reduce(((t,e)=>t*BigInt(e.length)),1n);this.length=e,Object.freeze(this)}at(t){if(void 0===(t=this._check(t)))return;let e=BigInt(t),n=[];for(let t=0;t<this.size;t++){const r=this.seed[t].length,i=BigInt(r),s=e%i;n.push(this.seed[t][Number(s)]),e-=s,e/=i}return n}}
//# sourceMappingURL=/sm/55fb3de11dcaa52569747d21964ef38cbfe5db63e41ad8d116dec2db73c2e754.map